
//
// file: pilot.proto
// purpose: message format for interfacing the pilot
// author: Tobias Simon, Ilmenau University of Technology
//


/////////////////////////
// REQUEST-REPLY DATA: //
/////////////////////////


enum RequestType
{
   // requests without parameters:
   RESET_CTRL =  1; // reset controllers (I-parts)
   GET_PARAMS =  2; // get parameters
   // request with parameters:
   SET_CTRL_PARAM = 3; // requires CtrlData */
}


enum CtrlParam
{
   // position setpoints:
   POS_E =        1; // East position, relative to starting point
   POS_N =        2; // North position, relative to starting point
   POS_U_GROUND = 3; // altitude above ground
   POS_U =        4; // altitude above msl
   POS_YAW =      5; // absolute yaw position, north = 0.0

   // speed setpoints:
   SPEED_NE =  6; // ne speed */
   SPEED_U =   7; // u speed */
   SPEED_YAW = 8; // yaw speed */
}


message CtrlData
{
   required CtrlParam param = 1;
   required float val =       2;
}


message Params
{
   // initial position reported by GPS:
   required double start_lon = 1;
   required double start_lat = 2;
   required double start_alt = 3;

   // position setpoints:
   required float setp_x =        4;
   required float setp_y =        5;
   required float setp_u =        6;
   optional float setp_u_ground = 7; // one of them is required, ...
   optional float setp_yaw =      8; // ... but not both!

   // speed control setpoints:
   required float setp_speed_xy =   9;
   required float setp_speed_u =   10;
   required float setp_speed_yaw = 11;
};


message PilotReq
{
   required RequestType type =   1;
   optional CtrlData ctrl_data = 2; // needed if type == SET_CTRL_DATA
}


enum Status
{
   OK =         0; // everything OK
   E_SYNTAX =   1; // syntactic error in data
   E_SEMANTIC = 2; // semantic errror in protobuf data
   E_HARDWARE = 3; // hardware error
}


message PilotRep
{
   required Status status =  1;
   optional string err_msg = 2;
   optional Params params =  3; // required if type == GET_PARAMS
}


//////////////////////
// MONITORING DATA: //
//////////////////////


message MonData
{
   required float x_err =   1; // x error in m
   required float y_err =   2; // y error in m
   required float z_err =   3; // z error in m
   required float yaw_err = 4; // yaw error in rad
}

