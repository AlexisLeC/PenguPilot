#  ___________________________________________________
# |  _____                       _____ _ _       _    |
# | |  __ \                     |  __ (_) |     | |   |
# | | |__) |__ _ __   __ _ _   _| |__) || | ___ | |_  |
# | |  ___/ _ \ '_ \ / _` | | | |  ___/ | |/ _ \| __| |
# | | |  |  __/ | | | (_| | |_| | |   | | | (_) | |_  |
# | |_|   \___|_| |_|\__, |\__,_|_|   |_|_|\___/ \__| |
# |                   __/ |                           |
# |  GNU/Linux based |___/  Multi-Rotor UAV Autopilot |
# |___________________________________________________|
#
# System IPC Configuration File
#
# Copyright (C) 2014 Tobias Simon, Ilmenau University of Technology
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.


components:

   - name: gps
     gates:
      - opcd_ctrl: req
      - data: pub

   - name: gps_test
     gates:
      - gps: sub

   - name: gpx_logger
     gates:
      - gps: sub

   - name: console_logger
     gates:
      - log: sub

   - name: remote
     gates:
      - data: pub
      - opcd_ctrl: req

   - name: ferry_ctrl
     gates:
      - state: sub
      - ctrl: req

   - name: icarus
     gates:
      - mon: sub
      - state: pub
      - pilot: req
      - ctrl: rep
      - power_ctrl: req
      - power_mon: sub

   - name: icarus_shell
     gates:
      - ctrl: req
 
   - name: wifi_sensor
     gates:
      - networks: pub

   - name: calibration
     gates:
      - data: pub

   - name: blackbox
     gates:
      - data: sub

   - name: pilot
     gates:
      - log: pub        # logs useful human-readable data at different verbosity levels
      - blackbox: pub   # publishes data produced in every step of the main loop
      - gps: sub        # subscribes to GPS data provider
      - rc: sub         # experimental remote control input
      - ctrl: rep       # control interface
      - mon: pub        # controller error monitoring publisher
      - power: sub      # power data subscriber
      - motors_spinning: pub # "true", "false" depending on motors state
      - opcd_ctrl: req  # OPCD request/reply interface
      - opcd_event: sub # OPCD parameter update

   - name: optimizer
     gates:
      - opcd_ctrl: req
      - blackbox: sub

   - name: pilot_shell
     gates:
      - ctrl: req
      - mon: sub
 
   - name: mavlink
     gates:
      - pilot_mon: sub
      - power_mon: sub
      - ctrl: req # opcd
      - gps: sub
      - icarus_ctrl: req
      - state: sub

   - name: powerman
     gates:
      - ctrl: rep
      - mon: pub
      - opcd_ctrl: req

   - name: opcd
     gates:
      - ctrl: rep
      - event: pub

   - name: opcd_shell
     gates:
      - ctrl: req

   - name: aircomm
     gates:
      - in: sub
      - out: pub
      - opcd_ctrl: req

   - name: display
     gates:
      - motors_spinning: sub
      - gps: sub
      - power: sub

   - name: heartbeat
     gates:
      - gps: sub
      - power: sub

   - name: aircomm_app
     gates:
      - in: sub
      - out: pub

   - name: wifi_loc
     gates:
      - wifi: sub
      - gps: sub

#
# component connections (component_a.gate_x -- component_b.gate_y)
#

connections:
   - [ wifi_loc.wifi,            wifi_sensor.networks]
   - [ wifi_loc.gps,             gps.data]
   - [ aircomm_app.out,          aircomm.in]
   - [ aircomm_app.in,           aircomm.out]
   - [ heartbeat.gps,            gps.data]
   - [ heartbeat.power,          powerman.mon]
   - [ display.motors_spinning,  pilot.motors_spinning]
   - [ display.gps,              gps.data]
   - [ display.power,            powerman.mon]
   - [ calibration.data,         blackbox.data]
   - [ pilot.blackbox,           blackbox.data]
   - [ opcd.ctrl,                aircomm.opcd_ctrl    ]
   - [ pilot.power,              powerman.mon         ]
   - [ opcd.event,               pilot.opcd_event      ]
   - [ opcd.ctrl,                opcd_shell.ctrl      ]
   - [ opcd.ctrl,                optimizer.opcd_ctrl   ]
   - [ pilot.blackbox,           optimizer.blackbox   ]
   - [ opcd.ctrl,                remote.opcd_ctrl      ]
   - [ opcd.ctrl,                pilot.opcd_ctrl       ]
   - [ opcd.ctrl,                gps.opcd_ctrl ]
   - [ opcd.ctrl,                powerman.opcd_ctrl   ]
   - [ mavlink.pilot_mon,        pilot.mon             ]
   - [ mavlink.power_mon,        powerman.mon         ]
   - [ mavlink.ctrl,             opcd.ctrl            ]
   - [ mavlink.icarus_ctrl,      icarus.ctrl          ]
   - [ mavlink.state,            icarus.state         ]
   - [ remote.data,              pilot.rc            ]
   - [ console_logger.log,       pilot.log             ]
   - [ gps.data,                 pilot.gps             ]
   - [ gps.data,                 mavlink.gps          ]
   - [ icarus.ctrl,              ferry_ctrl.ctrl      ]
   - [ icarus.power_ctrl,        powerman.ctrl        ]
   - [ icarus.power_mon,         powerman.mon         ]
   - [ ferry_ctrl.state,         icarus.state         ]
   - [ icarus.ctrl,              icarus_shell.ctrl    ]
   - [ pilot.ctrl,               icarus.pilot          ]
   - [ pilot.mon,                icarus.mon           ]
   - [ pilot.ctrl,               pilot_shell.ctrl      ]
   - [ pilot.mon,                pilot_shell.mon       ]
   - [ gpx_logger.gps,           gps.data       ]
   - [ gps.data,                 gps_test.gps         ]
   
